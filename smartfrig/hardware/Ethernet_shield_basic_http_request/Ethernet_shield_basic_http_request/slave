//I@C Slave Code(Uno)

#include <Wire.h>
#include <SoftwareSerial.h>
#include <SPI.h>
#include <Ethernet.h>

//==========================================
// General defines
//==========================================
#define DEBUG_MODE 1

//==========================================
// ethernet defines
//==========================================


// assign a MAC address for the ethernet controller.
// fill in your address here:
byte mac[] = {0x00, 0xAA, 0xBB, 0xCC, 0xDE, 0x04 };
// Azure Mobile Service address
// You can find this in your service dashboard
const char *server = "fringnfc.azure-mobile.net";

// Azure Mobile Service Application Key
// You can find this key in the 'Manage Keys' menu on the dashboard
const char *ams_key = "YsKiJgEvswUtPyOcSxkHiXPyvkJkgv25";
  
char buffer[64];
char bufferOut[64];
const char *frig_id = "1";

 // initialize the library instance:
EthernetClient client;

boolean lastConnected = false;                 // state of the connection last time through the main loop
String respond;
String input;

void ethernetSetup()
{
  // give the ethernet module time to boot up:
  delay(1000); 
 
  //Serial.println("Ethernet Setup");
 
  if (Ethernet.begin(mac) == 0) {
   // Serial.println("Ethernet failed");
    for (;;) ;
  }
  // give the Ethernet shield a second to initialize:
  delay(1000);
}

void setup() {
  // put your setup code here, to run once:
  Wire.begin(5);
  Wire.onReceive(receiveEvent);
  Wire.onRequest(requestEvent);
  ethernetSetup();
  
}

void loop() {
  // put your main code here, to run repeatedly:
  
}

void requestEvent(){
//  Wire.write("back");
  Wire.write(input.c_str(),input.length());
  
}

void receiveEvent(int howMany){

  //===============================================
  //Send to Arduino
//   String input="";
   input="";
   while(Wire.available()){
    
       char c =Wire.read();
       input += String(c);
     //if(c == 'H'){
     // digitalWrite(12,HIGH);
     // readTag("1;1;1;1;1;1;1;1");
     //}
     //else if(c =='L'){
     
     //}
   }
     readTag(input);
   //===============================================
}



/*
** Send an HTTP POST request to the Azure Mobile Service data API
*/
 
void sendRequest(String value)
{
  //Serial.println("\nconnecting...");
 
  if (client.connect(server, 80)) {
 
    //Serial.print("sending ");
    //Serial.println(value);
    
    // GET URI 
    sprintf(buffer, "POST /api/Arduino?itemData=%s&frigId=%s HTTP/1.1", value.c_str(),frig_id);
    client.println(buffer);
 
    // Host header
    sprintf(buffer, "Host: %s", server);
    client.println(buffer);
 
    // Azure Mobile Services application key
    sprintf(buffer, "X-ZUMO-APPLICATION: %s", ams_key);
    client.println(buffer);
 
    // JSON content type
    client.println("Content-Type: application/json");
  
    // Content length
    client.print("Content-Length: ");
    client.println(strlen(buffer));
 
    // End of headers
    client.println();
 
    // Request body
    client.println(buffer);
    
  } else {
   // Serial.println("connection failed");
  }
}


/*
** Wait for response
*/
 
void waitResponse()
{
  while (!client.available()) {
    if (!client.connected()) {
      return;
    }
  }
}

/*
** Read the response and dump to serial
*/
 
void readResponse()
{
  //bool print = true;
  //Serial.println("Data that was read from the server: ");
  char buf1[64] = {'\0'};
  int pos= 0;
  int len = 63;
  while (client.available()) {
    char c = client.read();
    // Print only until the first carriage return
    //if (c == '\n')
     // print = false;
    //if (print)
      buf1[pos]= c ;
      pos++;
      if (len <= pos ){
            break;
      }
  }
  if (buf1 != NULL)
        strcpy_P(bufferOut, buf1);
}

 
/*
** Close the connection
*/

void endRequest()
{
  client.stop();
}

void readTag(String itemData)
{
    sendRequest(itemData);
    waitResponse();
    if (DEBUG_MODE){
        readResponse();
    }
    endRequest();
    delay(1000);
}
